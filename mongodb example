/**
	*	Author: Mocrosoft ~ Sami Chkhachkhi
	*	Date: 10/11/2016
*/


//lets require/import the mongodb native drivers.
var mongodb = require('mongodb'); 
var net = require('net');


//We need to work with "MongoClient" interface in order to connect to a mongodb server.
var MongoClient = mongodb.MongoClient;


// Configurations
const url = 'mongodb://localhost:27017/bots';
const HOST = 'mocrosoft.zapto.org';
const PORT = 43594;

// Use connect method to connect to the Server
MongoClient.connect(url, function (err, db) {
  if (err) {
    console.log('Unable to connect to the mongoDB server. Error:', err);
  } else {
    //HURRAY!! We are connected. :)
    console.log('Connection established to', url);

    // Get the documents collection
    var collection = db.collection('looters');
	
	// TCP LISTEN port
	// Create an instance of the Server and waits for a connection
	net.createServer(function(sock) {
		var adress = sock.remoteAddress;
		var port = sock.remotePort;
		console.log('Server online on: ' + adress + ':' + port);
		// Add a 'data' - "event handler" in this socket instance
		sock.on('data', function(data) {
			var cleanData = data.slice(0, data.length - 2);
			var jsonData = JSON.parse(cleanData);
			var trade = false;
			collection.findOne({email:jsonData["email"]}, function(err, result) { //zoek eerst of account al bestaat
				var gold = 0, time = 0;
				if (err) {
					console.log("ERROR : " + err);
				} else if (result != undefined && result.trade != undefined) { //account bestaat al, neem even alle waardes die we in de update gebruiken
					trade = result.trade;
				}
				//of het account bestaat of niet, we doen een update met de informatie die we hebben
				collection.update({email:jsonData["email"]}, {email:jsonData["email"], gold:jsonData["gold"], time:jsonData["time"], trade:trade, img: jsonData["img"],position: jsonData["position"], hitpoints: jsonData["hitpoints"]}, {upsert: true}, function (err, result) {
					if (err) {
						console.log('ERROR : ' + err);
					} else {
						sock.write("{\"trade\":" + trade + "}\n", function(err) {
							if (err) {
								console.log("ERRROR : " + err);
							} else {
								console.log("Data succesfully sent to the client.");
							}
						});
						console.log("Done updating.");
					}
				});
			});
		});
		sock.on('end', function() {
			
		});
		// Add a 'close' - "event handler" in this socket instance
		sock.on('error', function(err) {
			sock.destroy();
			console.log("Catched error!");
			console.log(err.stack);
		}); // Add a 'close' - "event handler" in this socket instance
		sock.on('close', function(data) {
			// closed connection
			console.log('CLOSED: ' + adress + ':' + port);
			adress = "";
			port = "";
			//db.close();
		});
	}).listen(PORT); 
  }
});



console.log('Server listening on ' + HOST + ':' + PORT);
